

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

mycontext['lock'] = createlock() 
class ABFile():
  def __init__(self,filename,create):
    mycontext['debug'] = False 
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    
    mycontext['lock'].acquire(True) 
    if create:
        
        if  self.Afn in listfiles():
            self.Afile = openfile(self.Afn, create)
            self.Bfile = openfile(self.Bfn,create)
            self.Bfile.writeat(self.Afile.readat(None,0),0)
        else:
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn, create)
            self.Afile.writeat('SE', 0)
            self.Bfile.writeat(self.Afile.readat(None,0),0)
    
    else:
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        
      
            
  def writeat(self,data,offset):
    if offset >= 0 and (offset <= len(self.Bfile.readat(None,0))):
       self.Bfile.writeat(data,offset)
    

       
 def readat(self,bytes,offset):
    content = self.Afile.readat(bytes,offset)
    return content

            
  def close(self):
    backup_data = self.Afile.readat(None,0)
    readContent = self.Bfile.readat(None, 0)
    backupfile = self.Afn
    if self.Bfile.readat(None, 0).startswith("S") and self.Bfile.readat(None, 0).endswith("E"):
       self.Afile.close()
       self.Bfile.close()
       removefile(self.Afn)
       openfile(self.Afn,True).writeat(readContent,0)
       removefile(self.Bfn)
    else:
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Afn)
        openfile(backupfile,True).writeat(backup_data,0)
        removefile(self.Bfn)
    mycontext['lock'].release()
    
    
def ABopenfile(filename, create):
  return ABFile(filename,create)

      
      
        

sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

secure_dispatch_module()


    

        

    
    
    




    




    
  


            
        
            
        
            
        


    





 






